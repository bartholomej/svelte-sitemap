import { existsSync, mkdirSync, readFileSync, rmdirSync } from 'fs';
import { describe, expect, test } from 'vitest';
import { version } from '../package.json';
import { writeSitemap } from '../src/helpers/global.helper';
import { CHUNK } from '../src/vars';
import { TEST_FOLDER, deleteFolderIfExist } from './utils-test';

describe('Creating files', () => {
  const json = [
    {
      page: 'https://example.com/flat/'
    },
    {
      page: 'https://example.com/'
    },
    {
      page: 'https://example.com/page1/'
    },
    {
      page: 'https://example.com/page1/flat1/'
    },
    {
      page: 'https://example.com/page2/'
    },
    {
      page: 'https://example.com/page1/subpage1/'
    },
    {
      page: 'https://example.com/page2/subpage2/'
    },
    {
      page: 'https://example.com/page2/subpage2/subsubpage2/'
    }
  ];

  if (existsSync(TEST_FOLDER)) {
    rmdirSync(TEST_FOLDER, { recursive: true });
  }

  test('Sitemap.xml was created and contains right data', async () => {
    deleteFolderIfExist();
    mkdirSync(TEST_FOLDER);
    writeSitemap(json, { outDir: TEST_FOLDER }, 'example.com');

    expect(existsSync(`${TEST_FOLDER}/sitemap.xml`)).toBe(true);
    const fileContent = readFileSync(`${TEST_FOLDER}/sitemap.xml`, { encoding: 'utf-8' });
    expect(fileContent).toContain('https://example.com/flat/');
    expect((fileContent.match(/<url>/g) || []).length).toEqual(8);

    rmdirSync(TEST_FOLDER, { recursive: true });
  });

  test('Sitemap.xml is exact', async () => {
    CHUNK.maxSize = 8;

    deleteFolderIfExist();
    mkdirSync(TEST_FOLDER);
    writeSitemap(json, { outDir: TEST_FOLDER }, 'https://example.com');

    expect(existsSync(`${TEST_FOLDER}/sitemap.xml`)).toBe(true);
    const fileContent = readFileSync(`${TEST_FOLDER}/sitemap.xml`, { encoding: 'utf-8' });

    expect(fileContent).toContain(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">
  <!-- This file was automatically generated by https://github.com/bartholomej/svelte-sitemap v${version} -->
  <url>
    <loc>https://example.com/flat/</loc>
  </url>
  <url>
    <loc>https://example.com/</loc>
  </url>
  <url>
    <loc>https://example.com/page1/</loc>
  </url>
  <url>
    <loc>https://example.com/page1/flat1/</loc>
  </url>
  <url>
    <loc>https://example.com/page2/</loc>
  </url>
  <url>
    <loc>https://example.com/page1/subpage1/</loc>
  </url>
  <url>
    <loc>https://example.com/page2/subpage2/</loc>
  </url>
  <url>
    <loc>https://example.com/page2/subpage2/subsubpage2/</loc>
  </url>
</urlset>`);

    deleteFolderIfExist();
  });

  test('Sitemap.xml and sub sitemaps for large pages was created and contains right data', async () => {
    deleteFolderIfExist();
    CHUNK.maxSize = 5;

    mkdirSync(TEST_FOLDER);
    writeSitemap(json, { outDir: TEST_FOLDER }, 'https://example.com');

    expect(existsSync(`${TEST_FOLDER}/sitemap.xml`)).toBe(true);

    const fileContent = readFileSync(`${TEST_FOLDER}/sitemap.xml`, { encoding: 'utf-8' });

    expect(fileContent).toContain('https://example.com/sitemap-1.xml');
    expect((fileContent.match(/<sitemap>/g) || []).length).toEqual(2);

    expect(existsSync(`${TEST_FOLDER}/sitemap-1.xml`)).toBe(true);
    expect(existsSync(`${TEST_FOLDER}/sitemap-2.xml`)).toBe(true);

    const fileContent2 = readFileSync(`${TEST_FOLDER}/sitemap-2.xml`, { encoding: 'utf-8' });
    expect(fileContent2).toContain('https://example.com/page2/subpage2/subsubpage2/');
    expect((fileContent2.match(/<url>/g) || []).length).toEqual(3);

    deleteFolderIfExist();
  });
});
